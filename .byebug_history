continue
      expect(Date.parse(dates.first.to_s) <= Date.parse(dates.last.to_s)).to eq(true)
dates.first.to_s
dates.first
Date.parse(dates.first)
      expect(Date.parse(dates.first) <= Date.parse(dates.last)).to eq(true)
      dates = data.pluck(:created_at)
continue
likes_counter
      expect(likes_counter.first > likes_counter.last).to eq(true)
data
 likes_counter.last
likes_counter.first
continue
exit
Post.filter_by_feeling(1)
continue
exit
Contexts::Posts::Queries::AllRecords.new.call(args: args)
args
continue
          result = HealthSchema.execute(query, variables: { filters: {
            feeling: 1,
            created_at: nil,
            likes: nil
            } 
          }, context: context)
continue
          result = HealthSchema.execute(query, variables: { filters: {
            feeling: 1,
            created_at: nil,
            likes: nil
            } 
          }, context: context)
continue
exit
          result = HealthSchema.execute(query, variables: { filters: {
            feeling: 1,
            created_at: nil,
            likes: nil
            } 
          }, context: context)
continue
@adapter.all
continue
args[:filters]
args
continue
args
continue
args
continue
args[:filters]
args[:filters][:feeling]
 Contexts::Posts::Queries::AllRecords.new.call(args: args)
args
continue
args[:filters][:feeling]
args[:filters]
args
      Contexts::Posts::Queries::AllRecords.new.call(args: args)
continue
          result = HealthSchema.execute(query_feeling, variables: { filters: {
            feeling: 1
            } 
          }, context: context)
continue
args
Contexts::Posts::Queries::AllRecords.new.call(args: args)
exit
          result = HealthSchema.execute(query, variables: {
          }, context: context)
          size = result["data"]["allposts"].size
exit
continue
          Contexts::Posts::Repository.new.apply_filtering(posts: posts, args: args)
continue
Post.where(feeling: 1).size
Post.where(feeling: 1)
Post.all
          Post.create(id: SecureRandom.uuid, user_id: user.id, likes: [user.id], insights: "Ah", feeling: 1)
continue
feeling
continue
created_at
likes
feeling
continue
          size = result["data"]["allposts"].size
          result = HealthSchema.execute(query, variables: { filters: { 
            feeling: 99
            } 
          }, context: context)
  result = HealthSchema.execute(query, variables: { filters: { 
   61:             feeling: 99
   62:             } 
   63:           }, context: context)
continue
created_at
feeling
likes
continue
likes
feeling
continue
creates_at
likes
feeling
continue
          result = HealthSchema.execute(query, variables: { filters: { 
            feeling: 99
            } 
          }, context: context)
continue
          result = HealthSchema.execute(query, variables: { filters: { 
            feeling: 99
            } 
          }, context: context)
          expect(size).to eq(0)
          size = result["data"]["allposts"].size
continue
          expect(size).to eq(3)
          expect(Date.parse(dates.first) <= Date.parse(dates.last)).to eq(true)
          expect(Date.parse(dates.first) =< Date.parse(dates.last)).to eq(true)
          dates = result["data"]["allposts"].pluck("createdAt")
          expect(Date.parse(dates.first) < Date.parse(dates.last)).to eq(true)
Date.parse(dates.first) > Date.parse(dates.last)
Date.parse(dates.first)
(Date.parse(dates.first)
          dates = result["data"]["allposts"].pluck("createdAt")
          expect(Date.parse(dates.first) > Date.parse(dates.last)).to eq(true)
          dates = result["data"]["allposts"].pluck("createdAt")
continue
result["data"]["allposts"]
continue
          expect(size).to eq(3)
          expect(likes_counter.first > likes_counter.last).to eq(true)
          likes_counter = result["data"]["allposts"].pluck("likesCounter")
          size = result["data"]["allposts"].size
          expect{ likes_counter[0] > likes_counter[-1]}.to eq(true)
          likes_counter = result["data"]["allposts"].pluck("likesCounter")
          likes_counter = result["data"]["allposts"].collect(&:"likesCounter")
          likes_counter = result["data"]["allposts"].collect(&:likesCounter)
          likes_counter = result["data"]["allposts"].collect("likesCounter")
          likes_counter = result["data"]["allposts"].collect(&:likes)
result
continue
result
continue
      likes.as_json["batch_loader"].size
continue
      likes.as_json["batch_loader"].size
continue
      likes.as_json["batch_loader"].size
likes
continue
result
continue
Post.all
          Post.create(id: SecureRandom.uuid, user_id: user.id, likes: [], insights: "Ah", feeling: 1)
          Post.create(id: SecureRandom.uuid, user_id: user.id, likes: [], insights: "Ah", feeling: 0)
          Post.create(id: SecureRandom.uuid, user_id: user.id, likes: [user.id], insights: "Ah", feeling: 1)
exit
          result = HealthSchema.execute(query, variables: { filters: {
            likes: true
            } 
          }, context: context)
exit
          result = HealthSchema.execute(query, variables: { filters: {
            likes: true
            } 
          }, context: context)
likes_counter = result["data"]["allposts"]
Post.all
likes_counter = result["data"]["allposts"]
likes_counter = result["data"]["allposts"].as_json(only: [:likesCounter])
likes_counter = result["data"]["allposts"].as_json(only: ["likesCounter"])
likes_counter = result["data"]["allposts"].pluck("likesCounter")
likes_counter = result["data"]["allposts"].pluck(:likesCounter)
likes_counter = result["data"]["allposts"]
likes_counter = result["data"]["allposts"].collect("likesCounter")
likes_counter = result["data"]["allposts"].collect(:"likesCounter")
likes_counter = result["data"]["allposts"].collect(&:"likesCounter")
likes_counter = result["data"]["allposts"].collect(&:likes)
likes_counter = result["data"]["allposts"].collect(&:likesCounter)
likes_counter = result["data"]["allposts"]
exit
result
          size = result["data"]
          size = result["data"]["allposts"].size
exit
result["data"]["allposts"].pluck("likes")
result["data"]["allposts"].pluck("likesCounter")
result["data"]["allposts"]
result["data"]["allposts"].pluck(:likesCounter)
result["data"]["allposts"]
exit
          likes_counter = result["data"]["allposts"]
          likes_counter = result["data"]["allposts"].pluck(:likes)
continue
          result = HealthSchema.execute(query, variables: { filters: { feeling: 99} }, context: context)
result["data"]["allposts"]
continue
result
continue
result
continue
result
exit
result
continue
result
continue
result
continue
result
continue
          Contexts::Posts::Repository.new.apply_filtering(posts: post, args: args)
continue
          Contexts::Posts::Repository.new.apply_filtering(posts: posts, args: args)
          posts = Post.all
posts
          Contexts::Posts::Repository.new.apply_filtering(posts: posts, args: args)
continue
      Contexts::Posts::Queries::AllRecords.new.call(args: args)
continue
return posts
continue
exit
continue
exit
Post.where(feeling: 0)
Post.where(feeling: 1)
Post.all
          post.filter_by_feeling(feeling)
        feeling ||= args[:filters][:feeling]
continue
self
feeling
continue
filter_by_created_at
continue
                    Contexts::Posts::Repository.new.apply_filtering(post: posts, args: args)          
                    raise Contexts::Posts::Errors::PostsNotFoundError if posts == []
                    posts = Post.all
exit
        Contexts::Posts::Queries::AllRecords.new.call(args: args)
exit
        Contexts::Posts::Queries::AllRecords.new.call(args: args)
continue
      order("LENGTH(likes) ASC")
      order(.order("LENGTH(likes) ASC"))
      order(arel_table["likes"].length.desc)
      order(length(arel_table["likes"]).desc)
self.pluck(:likes)      order(length(arel_table["likes"]).desc)
self.pluck(:likes)
